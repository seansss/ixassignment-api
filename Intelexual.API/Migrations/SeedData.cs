using System;
using Intelexual.Data;
using static System.Net.WebRequestMethods;

namespace Intelexual.API.Migrations
{
	public class SeedData
	{
        // Test data generated by chatGPT 
        string[] fakeNames = { "Zayden Alderwood", "Brayleigh Briarwood", "Jaxxton Cedarbrook", "Kaisleigh Dunmore", "Kyree Elmwood", "Braxtyn Fairchild", "Nayvie Glenhaven", "Zaelie Harperfield", "Brexleigh Ironwood", "Xayvion Juniperhill", "Braxtlee Kingsley", "Kaelin Larkspur", "Maxtyn Meadowbrook", "Kwynn Noblecrest", "Rhylen Oakley", "Jayvion Parkhurst", "Jaxzyn Queensway", "Raelin Riverside", "Kynsley Stonebridge", "Jaxxen Thornbush", "Braxlyn Upland", "Kaeli Valleyview", "Maxxen Whitewood", "Xaela Xavierhill", "Raylen Yellowstone", "Zaxlee Zephyr", "Kairi Ashford", "Braxdyn Bridgewater", "Jaylee Cliffside", "Zaylie Driftwood", "Zion Alderwood", "Bristol Briarwood", "Caden Cedarbrook", "Daphne Dunmore", "Easton Elmwood", "Felicity Fairchild", "Granger Glenhaven", "Hazel Harperfield", "Isadora Ironwood", "Jasper Juniperhill", "Kamryn Kingsley", "Leif Larkspur", "Makenna Meadowbrook", "Nash Noblecrest", "Ophelia Oakley", "Pierce Parkhurst", "Quinn Queensway", "Reagan Riverside", "Sawyer Stonebridge", "Taryn Thornbush", "Uriah Upland", "Vera Valleyview", "Weston Whitewood", "Xander Xavierhill", "Yara Yellowstone", "Zara Zephyr", "Asher Ashford", "Blakely Bridgewater", "Carter Cliffside", "Daxton Driftwood", "Evelyn Alderwood", "Flynn Briarwood", "Gemma Cedarbrook", "Hudson Dunmore", "Isabelle Elmwood", "Jett Fairchild", "Kensington Glenhaven", "Landon Harperfield", "Madison Ironwood", "Niamh Juniperhill", "Odin Kingsley", "Piper Larkspur", "Quincy Meadowbrook", "Raven Noblecrest", "Sage Oakley", "Tegan Parkhurst", "Una Queensway", "Vaughn Riverside", "Wyatt Stonebridge", "Xyla Thornbush", "Yvette Upland", "Zion Valleyview", "Adalyn Whitewood", "Beckett Xavierhill", "Cassidy Yellowstone", "Dante Zephyr", "Ella Ashford", "Finn Bridgewater", "Gabriella Cliffside", "Hunter Driftwood" };
        string[] fakeProjectNames = { "NeuralNetX", "DataVision", "CodeCrushers", "BitBusters", "AIChallengers", "InfiniteLoop", "PixelPioneers", "Streamline", "DataGuardian", "CodeMasters", "PixelPro", "CyberScope", "DataDreamers", "CodeCatalysts", "PixelPerfect", "QuantumLeap", "DataDetectives", "CodeCommanders", "PixelPushers", "MindMeld", "DataDelight", "CodeCreators", "PixelPals", "CyberSavvy", "DataDynamos", "CodeCrusaders", "PixelPlay", "BrainWave", "DataDazzle", "CodeConquerors", "PixelProphet", "CyberSense", "DataDeities", "CodeChampions", "PixelPlunge", "NeuroNexus", "DataDynamo", "CodeClimbers", "PixelPursuit", "MindScope" };
        string[] fileMimeTypes = {
            "application/pdf",
            "application/msword",
            "application/vnd.ms-excel",
            "application/vnd.ms-powerpoint",
            "application/zip",
            "application/vnd.android.package-archive",
            "application/x-rar-compressed",
            "application/x-tar",
            "application/gzip",
            "image/jpeg",
            "image/png",
            "image/gif",
            "audio/mpeg",
            "audio/wav",
            "audio/ogg",
            "video/mp4",
            "video/avi",
            "video/mpeg",
            "text/plain",
            "text/html",
            "text/css",
            "text/javascript",
            "application/json",
            "application/xml",
            "application/rss+xml",
            "application/atom+xml"
        };

        public void MigratedAndSeedData(WebApplication app)
        {
            using (var scope = app.Services.CreateScope())
            {
                using (var appContext = scope.ServiceProvider.GetRequiredService<ProjectDbContext>())
                {
                    try
                    {
                        if (!appContext.Users.Any())
                        {
                            foreach (var fakeName in fakeNames)
                            {
                                Random rnd = new Random();
                                int num = rnd.Next(1, 100);

                                string trimmedName = fakeName.Replace(" ", "");

                                appContext.Users.Add(new Data.Models.User()
                                {
                                    Id = Guid.NewGuid(),
                                    Name = fakeName,
                                    Email = $"{trimmedName.ToLower()}@fakemail.com"
                                });
                            }

                            appContext.SaveChanges();
                        }

                        List<Data.Models.User> users = appContext.Users.ToList();

                        if (!appContext.Projects.Any())
                        {
                            foreach (var projectName in fakeProjectNames)
                            {
                                Random rnd = new Random();
                                int num = rnd.Next(50, 100);

                                Data.Models.Project fakeProject = new Data.Models.Project()
                                {
                                    Id = Guid.NewGuid(),
                                    Name = projectName,
                                    StartDate = DateTime.UtcNow.AddDays(-num).AddHours(-num).AddMinutes(-num)
                                };

                                fakeProject.Files = new List<Data.Models.IXFile>();
                                foreach (var mimeType in fileMimeTypes)
                                {
                                    for (int i = 1; i < 2; i++)
                                    {
                                        fakeProject.Files.Add(new Data.Models.IXFile()
                                        {
                                             FilePath = $"https://via.placeholder.com/{num * i}x{num}",
                                              Id = Guid.NewGuid(),
                                               Name = $"{projectName}_{i}",
                                               Type = mimeType
                                        });
                                    }
                                }

                                fakeProject.ProjectUsers = new List<Data.Models.ProjectUser>();

                                // add users to each project
                                for (int i = 0; i < 15; i++)
                                {
                                    int rnduser = rnd.Next(0, users.Count - 1);

                                    fakeProject.ProjectUsers.Add(new Data.Models.ProjectUser() {
                                         Id = Guid.NewGuid(),
                                          Project = fakeProject,
                                          UserId = users[rnduser].Id
                                    });
                                }

                                appContext.Projects.Add(fakeProject);
                            }

                            appContext.SaveChanges();
                        }

                        // Example of executing a raw sql file
                        // var sqlFile = Path.Combine("Migrations/Scripts/data_seed.sql");
                        // appContext.Database.ExecuteSqlRaw(File.ReadAllText(sqlFile));
                    }
                    catch (Exception ex)
                    {
                        //Log errors 
                        throw;
                    }
                }
            }
        }
    }
}

